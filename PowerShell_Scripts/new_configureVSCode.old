 <#
.SYNOPSIS
    Checks if Visual Studio Code (VSCode) is installed and installs it if not.

.DESCRIPTION
    This script checks if Visual Studio Code (VSCode) is installed on the system. If it's not installed, it downloads and installs VSCode.
    It also installs specific extensions for VSCode.

.NOTES
    - Ensure to install Daily Midway Setup from software center.
    - Ensure that you have appropriate permissions to install software on the system.
    - This script assumes that PowerShell 5.1 or later is being used.

.LINK
    Script Source: https://github.com/your-username/your-repo

#>


## Function to install VSCode extensions
function Install-VSCodeExtensions {
    param (
        [string[]]$extensions
    )

    try {
        foreach ($extension in $extensions) {
            & $codeExePath --install-extension $extension --force
        }
        Write-Host "Extensions installed successfully." -ForegroundColor Green
    }
    catch {
        Write-Host "Error occurred while installing extensions: $_" -ForegroundColor Red
    }
}

$codeExePath = "C:\Program Files\Microsoft VS Code\bin\code.cmd"

## Function to install Microsoft VS Code.
function Install-Application {
    param (
        [string]$AppName
    )

    try {
        # Check if application is already installed
        $installedApp = Get-CimInstance -ClassName CCM_Application -Namespace "root\ccm\clientSDK" | Where-Object { $_.Name -like $AppName }
        if ($installedApp.InstallState -eq 'Installed') {
            Write-Host "$AppName is already installed." -ForegroundColor Yellow
            return
        } else{
            # Attempt to get application instance
            Write-Host "Installing $AppName..." -ForegroundColor Blue
            $app = Get-CimInstance -ClassName CCM_Application -Namespace "root\ccm\clientSDK" | Where-Object { $_.Name -like $AppName }

            # Check if application instance is retrieved
            if ($app) {
                $Args = @{
                    EnforcePreference = [UINT32]0
                    Id = "$($app.id)"
                    IsMachineTarget = $app.IsMachineTarget
                    IsRebootIfNeeded = $False
                    Priority = 'High'
                    Revision = "$($app.Revision)" 
                }
            
                # Attempt to install application
                $output = Invoke-CimMethod -Namespace "root\ccm\clientSDK" -ClassName CCM_Application -MethodName Install -Arguments $Args
                if ($output.ReturnValue -eq 0) {
                    Start-Sleep -Seconds 45
                    Write-Host "$AppName installed successfully." -ForegroundColor Green
                } else {
                    Write-Host "Failed to install $AppName : $($output.ReturnValue)" -ForegroundColor Red
                    return
                }
            } else {
                Write-Output "Application instance not found for $AppName."
            }
        }
    } catch {
        Write-Output "Failed to install $AppName : $_"
    }
}

## Check if VSCode is installed
$vsCodeInstalled = $null

try {
    # Specify the registry path where VSCode installation information is stored
    $registryPath = "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall"

    # Specify the registry key for Visual Studio Code
    $vsCodeKey = Get-ItemProperty -Path "$registryPath\*" | Where-Object { $_.DisplayName -eq "Microsoft Visual Studio Code" }

    if ($vsCodeKey) {
        Write-Host "Visual Studio Code is installed." -ForegroundColor Green
        $vsCodeInstalled = $true
    } else {
        Write-Host "Visual Studio Code is not installed. Installing Visual Studio Code..." -ForegroundColor Blue
        $vsCodeInstalled = $false
    }
} catch {
    Write-Host "Error occurred while checking VSCode installation: $_" -ForegroundColor Red
    $vsCodeInstalled = $false
}

## Install VSCode if not already installed
if (-not $vsCodeInstalled) {
    Install-Application -AppName 'Visual Studio Code'
    Start-Sleep -Seconds 45
    Write-Host "Installation Complete!" -ForegroundColor Green
    ## Refresh environment variables to load VSCode
    try {
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path + ";C:\Program Files\Microsoft VS Code\bin", "Machine")
    }
    catch {
        Write-Host "Error occurred while setting environment variable: $_" -ForegroundColor Red
        exit 1
    }

    ## Install required VSCode extensions
    $requiredExtensions = @(
        "amazonwebservices.aws-toolkit-vscode",
        "docsmsft.docs-yaml",
        "ms-vscode.powershell",
        "ms-vscode-remote.remote-containers",
        "ms-vscode-remote.remote-ssh",
        "ms-vscode-remote.remote-ssh-edit",
        "ms-vscode-remote.vscode-remote-extensionpack"
    )
    Install-VSCodeExtensions -extensions $requiredExtensions
} else {
    Write-Host "VS Code is already installed. Skipping VS Code Installation..." -ForegroundColor Yellow
}
 
